/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/repository/EntityRepository.java.e.vm
 */
package com.sadetec.repository;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;

import com.sadetec.model.SalesOrder;
import com.sadetec.model.SalesOrderWithStock;
import com.sadetec.model.SalesOrder_;

@Transactional
public interface SalesOrderRepository extends JpaRepository<SalesOrder, Integer> {

	@Query(value="SELECT DISTINCT(QUOTER_ID) FROM SALES_ORDER WHERE FORM_INSTANCE_ID = ?1 AND QUOTER_ID IS NOT NULL AND NEED_PROC=TRUE", nativeQuery = true)
	List<String> findSalesOrderAssignees(Integer formInstanceId);
	
	List<SalesOrder> findByFormInstanceIdOrderById(Integer formInstanceId);
	
	@Query(value="SELECT SALES_ORDER.SUPPLIER_NAME, SALES_ORDER.PRODUCT_NAME,SALES_ORDER.PRODUCT_CODE,SALES_ORDER.AT_PRODUCT_CODE,SALES_ORDER.AMOUNT,SALES_ORDER.UNIT,SALES_ORDER.UNIT_PRICE,SALES_ORDER.AMOUNT*SALES_ORDER.UNIT_PRICE,SALES_ORDER.DELIVERY_TIME,SALES_ORDER.VALID_DATE,SALES_ORDER.COMMENT FROM SALES_ORDER WHERE SALES_ORDER.FORM_INSTANCE_ID = ?1", nativeQuery = true)
	//@Query(value="SELECT new com.sadetec.model.SalesOrderWithStock(SalesOrder.brand,SalesOrder.categoryName,SalesOrder.productCode,SalesOrder.atProductCode,SalesOrder.amount,SalesOrder.unit,SalesOrder.unitPrice,StockQuant.useQty) FROM SalesOrder LEFT JOIN StockQuant ON ( SalesOrder.productCode = StockQuant.productId OR SalesOrder.atProductCode = StockQuant.productId ) WHERE SalesOrder.formInstanceId = ?1")
	//@Query(value="SELECT new com.sadetec.model.SalesOrderWithStock(so.brand,so.categoryName,so.productCode,so.atProductCode,so.amount,so.unit,so.unitPrice,sq.useQty) FROM SalesOrder so LEFT JOIN StockQuant sq ON ( so.productCode = sq.productId OR so.atProductCode = sq.productId ) WHERE so.formInstanceId = ?1")
	List<Object[]> findSalesOrderWithStock(Integer formInstanceId);
	
	@Modifying(clearAutomatically = true)
    @Query(value="DELETE FROM SALES_ORDER WHERE FORM_INSTANCE_ID = ?1", nativeQuery = true)
    int deleteRows(Integer formInstanceId);
	
    default List<SalesOrder> complete(String query, int maxResults) {
        SalesOrder probe = new SalesOrder();
        probe.setCategoryCode(query);

        ExampleMatcher matcher = ExampleMatcher.matching() //
                .withMatcher(SalesOrder_.categoryCode.getName(), match -> match.ignoreCase().startsWith());

        Page<SalesOrder> page = findAll(Example.of(probe, matcher), new PageRequest(0, maxResults));
        return page.getContent();
    }

    @Query(value="SELECT SUM(AMOUNT*UNIT_PRICE) FROM SALES_ORDER WHERE FORM_INSTANCE_ID = ?1", nativeQuery = true)
	BigDecimal calcTotalPrice(Integer formInstanceId);

    List<SalesOrder> findByFormInstanceIdAndQuoterId(Integer formInstanceId, String priceInquiryAssignee);

	List<SalesOrder> findByFormInstanceIdAndAuditorIdAndNeedProc(int parseInt, String priceAuditorAssignee, Boolean needProc);

	List<SalesOrder> findByFormInstanceIdAndQuoterIdAndNeedProc(Integer formInstanceId, String quoterId, boolean needProc);

	List<SalesOrder> findByFormInstanceIdAndAuditorId(Integer formInstanceId, String username);

	@Query(value="SELECT * FROM SALES_ORDER WHERE  FORM_INSTANCE_ID = ?1 AND (AUDITOR_ID != ?2 OR AUDITOR_ID IS NULL) AND CATEGORY_NAME IN (SELECT CATEGORY_NAME FROM CATEGORY WHERE AUDITOR_ID = ?2)", nativeQuery = true)
	List<SalesOrder> findByCategoryName(Integer formInstanceId, String username);
	
	@Query(value="SELECT * FROM SALES_ORDER WHERE PROCESS_TYPE=?3 AND FORM_INSTANCE_ID = ?1 AND (AUDITOR_ID != ?2 OR AUDITOR_ID IS NULL) AND CATEGORY_NAME IN (SELECT CATEGORY_NAME FROM CATEGORY WHERE AUDITOR_ID = ?2)", nativeQuery = true)
	List<SalesOrder> findByCategoryNameAndProcessType(Integer formInstanceId, String username, String processType);
}