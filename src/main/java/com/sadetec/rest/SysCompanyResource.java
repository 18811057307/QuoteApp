/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.sadetec.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;

import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sadetec.model.SysCompany;
import com.sadetec.repository.SysCompanyRepository;
import com.sadetec.repository.SysUserRepository;
import com.sadetec.rest.support.PageResponse;

@RestController
@RequestMapping("/api/sysCompany")
public class SysCompanyResource {

    private final Logger log = LoggerFactory.getLogger(SysCompanyResource.class);

    @Autowired
    private SysCompanyRepository sysCompanyRepository;
    
    @Autowired
    private SysUserRepository sysUserRepository;
    
	@Autowired
	private ObjectMapper objectMapper;

	@RequestMapping(value = "/create", method = POST, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity<PageResponse<SysCompany>> create(@RequestBody String json) throws URISyntaxException {

		log.info("Create json : {}", json);

		List<SysCompany> pageContents = new ArrayList<SysCompany>();
		PageResponse<SysCompany> pageResponse = new PageResponse<SysCompany>(pageContents);

		try {
			JsonNode root = objectMapper.readTree(json);
			JsonNode tempNode = root.get("data");
			if (tempNode.isArray()) {
				List<SysCompany> stockQuants = objectMapper.convertValue(tempNode, new TypeReference<List<SysCompany>>() {
				});
				for (SysCompany temp : stockQuants) {
					log.info("SysCompany to Create : {}", temp);
					sysCompanyRepository.save(temp);
				}
				pageContents.addAll(stockQuants);
			}
			else {
				SysCompany tempObj = objectMapper.convertValue(tempNode, SysCompany.class);
				sysCompanyRepository.save(tempObj);
				pageContents.add(tempObj);
			}

			pageResponse.setSuccess(Boolean.TRUE);
			pageResponse.setMessage("Create SysCompany Success");
			return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);

		}
		catch (Exception e) {
			e.printStackTrace();
			pageResponse.setSuccess(Boolean.FALSE);
			pageResponse.setMessage("Create SysCompany Failure");
			return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);
		}

	}

	@RequestMapping(value = "/page", method = GET, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity<PageResponse<SysCompany>> findPage(@RequestParam(value = "page", required = false) Integer page,
			@RequestParam(value = "limit", required = false) Integer limit,
			@RequestParam(value = "parentId", required = false) Integer parentId) throws URISyntaxException {

		Sort sortByName = new Sort(Direction.ASC, "name");
		Page<SysCompany> result;
		if(page != null) {
			result = sysCompanyRepository.findAll(new PageRequest(page - 1, limit, sortByName));			
		} else {
			result = sysCompanyRepository.findAll(new PageRequest(0, -1, sortByName));
		}
		PageResponse<SysCompany> pageResponse = new PageResponse<SysCompany>(result.getContent());
		pageResponse.setSuccess(Boolean.TRUE);
		pageResponse.setTotal(result.getTotalElements());

		return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);

	}

	@RequestMapping(value = "/update", method = POST, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity<PageResponse<SysCompany>> update(@RequestBody String json) throws URISyntaxException {

		log.debug("Update by id SysCompany : {}", json);
		PageResponse<SysCompany> pageResponse = new PageResponse<SysCompany>(null);
		TypeReference<List<SysCompany>> typeRef = new TypeReference<List<SysCompany>>() {
		};
		try {
			JsonNode root = objectMapper.readTree(json);
			JsonNode tempNode = root.get("data");
			if (tempNode.isArray()) {
				List<SysCompany> temps = objectMapper.convertValue(tempNode, typeRef);
				for (Iterator<SysCompany> ketIter = temps.iterator(); ketIter.hasNext();) {
					SysCompany tempObj = ketIter.next();
					sysCompanyRepository.save(tempObj);
				}
			}
			else {
				SysCompany tempObj = objectMapper.convertValue(tempNode, SysCompany.class);
				sysCompanyRepository.save(tempObj);
			}

			pageResponse.setSuccess(Boolean.TRUE);
			pageResponse.setMessage("Update SysCompany Success");
			return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);
		}
		catch (Exception e) {
			e.printStackTrace();
			pageResponse.setSuccess(Boolean.FALSE);
			pageResponse.setMessage("Update SysCompany Failure");
			return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);
		}

	}

	@RequestMapping(value = "/delete", method = POST, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity<PageResponse<SysCompany>> delete(@RequestBody String json) throws URISyntaxException {

		log.debug("Delete by id SysCompany : {}", json);
		PageResponse<SysCompany> pageResponse = new PageResponse<SysCompany>(null);
		TypeReference<List<SysCompany>> typeRef = new TypeReference<List<SysCompany>>() {
		};
		try {
			JsonNode root = objectMapper.readTree(json);
			JsonNode tempNode = root.get("data");
			if (tempNode.isArray()) {
				List<SysCompany> temps = objectMapper.convertValue(tempNode, typeRef);
				for (Iterator<SysCompany> ketIter = temps.iterator(); ketIter.hasNext();) {
					SysCompany tempObj = ketIter.next();
					SysCompany temp = sysCompanyRepository.findOne(tempObj.getId());
					if (null != temp) {
						
						Long userCount = sysUserRepository.countByCompanyId(temp.getId());
						if(userCount > 0) {
							pageResponse.setSuccess(Boolean.FALSE);
							pageResponse.setMessage("删除该组织前需要清楚本公司的所有人员.");
							return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);
						}
						
						sysCompanyRepository.delete(temp);
					}
				}
			}
			else {
				SysCompany tempObj = objectMapper.convertValue(tempNode, SysCompany.class);
				SysCompany temp = sysCompanyRepository.findOne(tempObj.getId());
				if (null != temp) {
					Long userCount = sysUserRepository.countByCompanyId(temp.getId());
					if(userCount > 0) {
						pageResponse.setSuccess(Boolean.FALSE);
						pageResponse.setMessage("删除该组织前需要清楚本公司的所有人员.");
						return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);
					}
					sysCompanyRepository.delete(temp);
				}
			}

			pageResponse.setSuccess(Boolean.TRUE);
			pageResponse.setMessage("Delete SysCompany Success");
			return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);
		}
		catch (Exception e) {
			e.printStackTrace();
			pageResponse.setSuccess(Boolean.FALSE);
			pageResponse.setMessage("Delete SysCompany Failure");
			return new ResponseEntity<PageResponse<SysCompany>>(pageResponse, HttpStatus.OK);
		}

	}
    
}