/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.sadetec.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;

import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sadetec.model.ProductSupplierinfo;
import com.sadetec.repository.ProductSupplierinfoRepository;
import com.sadetec.rest.support.PageResponse;

@RestController
@RequestMapping("/api/productSupplierinfo")
public class ProductSupplierinfoResource {

    private final Logger log = LoggerFactory.getLogger(ProductSupplierinfoResource.class);

    @Autowired
    private ProductSupplierinfoRepository productSupplierinfoRepository;
    
	@Autowired
	private ObjectMapper objectMapper;

	@RequestMapping(value = "/create", method = POST, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity<PageResponse<ProductSupplierinfo>> create(@RequestBody String json) throws URISyntaxException {

		log.info("Create json : {}", json);

		List<ProductSupplierinfo> pageContents = new ArrayList<ProductSupplierinfo>();
		PageResponse<ProductSupplierinfo> pageResponse = new PageResponse<ProductSupplierinfo>(pageContents);

		try {
			JsonNode root = objectMapper.readTree(json);
			JsonNode tempNode = root.get("data");
			if (tempNode.isArray()) {
				List<ProductSupplierinfo> stockQuants = objectMapper.convertValue(tempNode, new TypeReference<List<ProductSupplierinfo>>() {
				});
				for (ProductSupplierinfo temp : stockQuants) {
					log.info("ProductSupplierinfo to Create : {}", temp);
					productSupplierinfoRepository.save(temp);
				}
				pageContents.addAll(stockQuants);
			}
			else {
				ProductSupplierinfo tempObj = objectMapper.convertValue(tempNode, ProductSupplierinfo.class);
				productSupplierinfoRepository.save(tempObj);
				pageContents.add(tempObj);
			}

			pageResponse.setSuccess(Boolean.TRUE);
			pageResponse.setMessage("Create ProductSupplierinfo Success");
			return new ResponseEntity<PageResponse<ProductSupplierinfo>>(pageResponse, HttpStatus.OK);

		}
		catch (Exception e) {
			e.printStackTrace();
			pageResponse.setSuccess(Boolean.FALSE);
			pageResponse.setMessage("Create ProductSupplierinfo Failure");
			return new ResponseEntity<PageResponse<ProductSupplierinfo>>(pageResponse, HttpStatus.OK);
		}

	}

	@RequestMapping(value = "/page", method = GET, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity<PageResponse<ProductSupplierinfo>> findPage(@RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
			@RequestParam(value = "start", required = false) Integer start, @RequestParam(value = "limit", required = false, defaultValue = "25") Integer limit,
			@RequestParam(value = "filter", required = false) String filter, @RequestParam(value = "sort", required = false) String sort,
			@RequestParam(value = "resId", required = false) Integer resId) throws URISyntaxException {

		Page<ProductSupplierinfo> result  = productSupplierinfoRepository.findAll(new PageRequest(page - 1, limit));
		PageResponse<ProductSupplierinfo> pageResponse = new PageResponse<ProductSupplierinfo>(result.getContent());
		pageResponse.setSuccess(Boolean.TRUE);
		pageResponse.setTotal(result.getTotalElements());

		return new ResponseEntity<PageResponse<ProductSupplierinfo>>(pageResponse, HttpStatus.OK);

	}

	@RequestMapping(value = "/update", method = POST, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity<PageResponse<ProductSupplierinfo>> update(@RequestBody String json) throws URISyntaxException {

		log.debug("Update by id ProductSupplierinfo : {}", json);
		PageResponse<ProductSupplierinfo> pageResponse = new PageResponse<ProductSupplierinfo>(null);
		TypeReference<List<ProductSupplierinfo>> typeRef = new TypeReference<List<ProductSupplierinfo>>() {
		};
		try {
			JsonNode root = objectMapper.readTree(json);
			JsonNode tempNode = root.get("data");
			if (tempNode.isArray()) {
				List<ProductSupplierinfo> temps = objectMapper.convertValue(tempNode, typeRef);
				for (Iterator<ProductSupplierinfo> ketIter = temps.iterator(); ketIter.hasNext();) {
					ProductSupplierinfo tempObj = ketIter.next();
					productSupplierinfoRepository.save(tempObj);
				}
			}
			else {
				ProductSupplierinfo tempObj = objectMapper.convertValue(tempNode, ProductSupplierinfo.class);
				productSupplierinfoRepository.save(tempObj);
			}

			pageResponse.setSuccess(Boolean.TRUE);
			pageResponse.setMessage("Update ProductSupplierinfo Success");
			return new ResponseEntity<PageResponse<ProductSupplierinfo>>(pageResponse, HttpStatus.OK);
		}
		catch (Exception e) {
			e.printStackTrace();
			pageResponse.setSuccess(Boolean.FALSE);
			pageResponse.setMessage("Update ProductSupplierinfo Failure");
			return new ResponseEntity<PageResponse<ProductSupplierinfo>>(pageResponse, HttpStatus.OK);
		}

	}

	@RequestMapping(value = "/delete", method = POST, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity<PageResponse<ProductSupplierinfo>> delete(@RequestBody String json) throws URISyntaxException {

		log.debug("Delete by id ProductSupplierinfo : {}", json);
		PageResponse<ProductSupplierinfo> pageResponse = new PageResponse<ProductSupplierinfo>(null);
		TypeReference<List<ProductSupplierinfo>> typeRef = new TypeReference<List<ProductSupplierinfo>>() {
		};
		try {
			JsonNode root = objectMapper.readTree(json);
			JsonNode tempNode = root.get("data");
			if (tempNode.isArray()) {
				List<ProductSupplierinfo> temps = objectMapper.convertValue(tempNode, typeRef);
				for (Iterator<ProductSupplierinfo> ketIter = temps.iterator(); ketIter.hasNext();) {
					ProductSupplierinfo tempObj = ketIter.next();
					ProductSupplierinfo temp = productSupplierinfoRepository.findOne(tempObj.getId());
					if (null != temp) {
						productSupplierinfoRepository.delete(temp);
					}
				}
			}
			else {
				ProductSupplierinfo tempObj = objectMapper.convertValue(tempNode, ProductSupplierinfo.class);
				ProductSupplierinfo temp = productSupplierinfoRepository.findOne(tempObj.getId());
				if (null != temp) {
					productSupplierinfoRepository.delete(temp);
				}
			}

			pageResponse.setSuccess(Boolean.TRUE);
			pageResponse.setMessage("Delete ProductSupplierinfo Success");
			return new ResponseEntity<PageResponse<ProductSupplierinfo>>(pageResponse, HttpStatus.OK);
		}
		catch (Exception e) {
			e.printStackTrace();
			pageResponse.setSuccess(Boolean.FALSE);
			pageResponse.setMessage("Delete ProductSupplierinfo Failure");
			return new ResponseEntity<PageResponse<ProductSupplierinfo>>(pageResponse, HttpStatus.OK);
		}

	}
}