/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.sadetec.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.camunda.bpm.engine.repository.ProcessDefinition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sadetec.model.Category;
import com.sadetec.model.ManualProductMap;
import com.sadetec.model.ProcessDefinitionDto;
import com.sadetec.model.SalesOrder;
import com.sadetec.repository.SalesOrderRepository;
import com.sadetec.rest.support.AutoCompleteQuery;
import com.sadetec.rest.support.PageResponse;
import com.sadetec.service.StorageException;
import com.sadetec.service.StorageService;
import com.sadetec.util.ExcelImportUtils;
import com.sadetec.util.WorkbookProperties;

@RestController
@RequestMapping("/api/salesOrder")
public class SalesOrderResource {

    private final Logger log = LoggerFactory.getLogger(SalesOrderResource.class);

    @Autowired
    private SalesOrderRepository salesOrderRepository;
    
	@Autowired
	private StorageService storageService;

	@Autowired
	private WorkbookProperties workbookProperties;
	
	@Autowired
	private ObjectMapper objectMapper;
	
    /**
     * 上传销售订单，将订单中的产品信息进行预处理
     * 
     * @param file
     * @return
     * @throws IOException
     */
	@PostMapping("/upload")
	public ResponseEntity<PageResponse> handleFileUpload(@RequestParam("file") MultipartFile file,
			@RequestParam(value = "formInstanceId", required = true) Integer formInstanceId) throws IOException {
		try {
			storageService.store(file);
			PageResponse pageResponse = new PageResponse(null);
			pageResponse.setSuccess(true);

			String oriFileName = file.getOriginalFilename();

			Workbook workbook = null;
			if (oriFileName.endsWith("xlsx")) {
				workbook = new XSSFWorkbook(storageService.loadAsStream(oriFileName));
			}
			else if (oriFileName.endsWith("xls")) {
				workbook = new HSSFWorkbook(storageService.loadAsStream(oriFileName));
			}

			List<Map<String, Object>> columnValues = ExcelImportUtils.columns(workbook, workbookProperties.getSalseOrderConfig());

			List<String> errors = new ArrayList<String>();
			for (Map<String, Object> map : columnValues) {
				try {
					SalesOrder tempOrder = new SalesOrder();
					BeanUtils.populate(tempOrder, map);
					tempOrder.setFormInstanceId(formInstanceId);
					log.info("待保存订单产品信息:{}", tempOrder);
					salesOrderRepository.saveAndFlush(tempOrder);
				}
				catch (Exception e) {
					log.error("导入产品对照信息出错：{},失败原因:{}", map, e.getCause());
				}
			}

			return new ResponseEntity<PageResponse>(pageResponse, HttpStatus.OK);
		}
		catch (StorageException se) {
			PageResponse pageResponse = new PageResponse(null);
			pageResponse.setSuccess(false);
			pageResponse.setMessage(se.getMessage());
			return new ResponseEntity<PageResponse>(pageResponse, HttpStatus.OK);
		}
	}
    
    /**
     * Create a new SalesOrder.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<SalesOrder> create(@RequestBody SalesOrder salesOrderDTO) throws URISyntaxException {

        log.debug("Create SalesOrder : {}", salesOrderDTO);

        if (salesOrderDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create SalesOrder with existing ID").body(null);
        }

        SalesOrder result = salesOrderRepository.save(salesOrderDTO);

        return ResponseEntity.created(new URI("/api/salesOrders/" + result.getId())).body(result);
    }

    /**
    * Find by id SalesOrder.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<SalesOrder> findById(@PathVariable Integer id) throws URISyntaxException {

        log.debug("Find by id SalesOrder : {}", id);

        return Optional.ofNullable(salesOrderRepository.findOne(id)).map(salesOrderDTO -> new ResponseEntity<>(salesOrderDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update SalesOrder.
     */
    @RequestMapping(value = "/update", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<SalesOrder>> update(@RequestBody String json) throws URISyntaxException {

    	log.debug("Update SalesOrder : {}", json);
		PageResponse<SalesOrder> pageResponse = new PageResponse<SalesOrder>(null);
		TypeReference<List<SalesOrder>> typeRef = new TypeReference<List<SalesOrder>>() {
		};
		try {
			JsonNode root = objectMapper.readTree(json);
			JsonNode tempNode = root.get("data");
			if (tempNode.isArray()) {
				List<SalesOrder> temps = objectMapper.convertValue(tempNode, typeRef);
				for (Iterator<SalesOrder> ketIter = temps.iterator(); ketIter.hasNext();) {
					SalesOrder tempObj = ketIter.next();
					salesOrderRepository.save(tempObj);
				}
			}
			else {
				SalesOrder tempObj = objectMapper.convertValue(tempNode, SalesOrder.class);
				salesOrderRepository.save(tempObj);
			}

			pageResponse.setSuccess(Boolean.TRUE);
			pageResponse.setMessage("Update SalesOrder Success");
			return new ResponseEntity<PageResponse<SalesOrder>>(pageResponse, HttpStatus.OK);
		}
		catch (Exception e) {
			e.printStackTrace();
			pageResponse.setSuccess(Boolean.FALSE);
			pageResponse.setMessage("Update SalesOrder Failure");
			return new ResponseEntity<PageResponse<SalesOrder>>(pageResponse, HttpStatus.OK);
		}
    }

    /**
     * Find a Page of SalesOrder using query by example.
     */
    @RequestMapping(value = "/page", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<SalesOrder>> findPage(
    		@RequestParam(value = "formInstanceId", required = true) Integer formInstanceId) throws URISyntaxException {
		List<SalesOrder> results = salesOrderRepository.findByFormInstanceId(formInstanceId);
		
		PageResponse<SalesOrder> pageResponse = new PageResponse<SalesOrder>(results);
		pageResponse.setSuccess(Boolean.TRUE);
		pageResponse.setTotal(results.size());

		return new ResponseEntity<PageResponse<SalesOrder>>(pageResponse, HttpStatus.OK);
    }

    /**
     * Delete SalesOrder By FormInstance ID.
     */
    @RequestMapping(value = "/delete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@RequestParam(value = "formInstanceId", required = true) Integer formInstanceId) throws URISyntaxException {

        log.debug("Delete by FormInstanceId : {}", formInstanceId);

        try {
            salesOrderRepository.deleteRows(formInstanceId);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
        	x.printStackTrace();
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}